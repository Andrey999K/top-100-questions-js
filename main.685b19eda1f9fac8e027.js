(()=>{"use strict";const t=JSON.parse('[{"id":1,"text":"Чем отличается оператор \\"==\\" от \\"===\\"?","img":"","answers":[{"id":1,"text":"\\"==\\" сравнивает значения с приведением типов, в то время как \\"===\\" сравнивает значения без приведения типов"},{"id":2,"text":"\\"==\\" сравнивает значения без приведения типов, в то время как \\"===\\" сравнивает значения с приведением типов"},{"id":3,"text":"\\"==\\" сравнивает значения, а \\"===\\" сравнивает и если значения равны, присваивает значение"},{"id":4,"text":"В JavaScript нет оператора \\"===\\""}],"rightAnswer":2,"points":100},{"id":2,"text":"Какие основные типы данных есть в JavaScript?","img":"","answers":[{"id":1,"text":"Number, BigInt, String, Boolean, Null, Undefined, Object, Symbol"},{"id":2,"text":"Number, String, Boolean, Object, Function, Null"},{"id":3,"text":"Int, Float, String, Array, Function, Object"},{"id":4,"text":"Number, BigInt, String, Boolean, Null, Undefined, Object"}],"rightAnswer":1,"points":100},{"id":3,"text":"В чём отличие var, let и const?","img":"","answers":[{"id":1,"text":"let и const отличаются тем, что мы не можем переназначить переменную объявленную с помощью const, а var это устаревший синтаксис let"},{"id":2,"text":"var это устаревший синтаксис let, а const отличается от них тем, что переменную объявленную с помощью const нельзя переназначить"},{"id":3,"text":"let и const имеют блочную область видимости и отличаются тем, что мы не можем переназначить переменную объявленную с помощью const. А var отличается от let тем, что имеет функциональную область видимости"},{"id":4,"text":"var это устаревший синтаксис let. Они имеют функциональную область видимости, а const отличается от них тем, что имеет блочную область видимости"}],"rightAnswer":3,"points":100},{"id":4,"text":"В чём отличие стрелочной функции от обычной?","img":"","answers":[{"id":1,"text":"У обычной функции в отличии от стелочной есть собственный this и мы можем обратиться к ней до её объявления."},{"id":2,"text":"У стрелочной функции в отличии от обычной есть собственный this и мы можем обратиться к ней до её объявления."},{"id":3,"text":"У обычной функции в отличии от стрелочной есть собственный this и мы не можем обратиться к ней до её объявления."},{"id":4,"text":"У стрелочной функции в отличии от обычной есть собственный this и мы не можем обратиться к ней до её объявления. "}],"rightAnswer":1,"points":230},{"id":5,"text":"Что такое event.preventDefault()?","img":"","answers":[{"id":1,"text":"Метод, предотвращающий дальнейшее распространение текущего события, т.е. предотвращает дальнейшее всплытие события."},{"id":2,"text":"Ссылка на объект, который был инициатором события."},{"id":3,"text":"Ссылка на элемент, в котором в данный момент обрабатывается событие."},{"id":4,"text":"Метод, отменяющий поведение браузера по умолчанию, которое происходит при обработке события."}],"rightAnswer":4,"points":130},{"id":6,"text":"Что такое event loop?","img":"","answers":[{"id":1,"text":"Это механизм JavaScript, позволяющий реализовать выполнение асинхронного кода и управление событиями в однопоточной среде."},{"id":2,"text":"Это механизм JavaScript, позволяющий добавлять элементам обработчики событий."},{"id":3,"text":"Это добавление события внутри какого-либо цикла."},{"id":4,"text":"Это добавление события элементу при выполнении другого события этого элемента."}],"rightAnswer":1,"points":200},{"id":7,"text":"Что такое Event.stopPropagation()?","img":"","answers":[{"id":1,"text":"Ссылка на элемент, который был инициатором события."},{"id":2,"text":"Ссылка на элемент, в котором в данный момент обрабатывается событие."},{"id":3,"text":"Метод, предотвращающий дальнейшее распространение текущего события, т.е. предотвращает дальнейшее всплытие события."},{"id":4,"text":"Метод, отменяющий поведение браузера по умолчанию, которое происходит при обработке события."}],"rightAnswer":3,"points":200},{"id":8,"text":"Что такое Event.target?","img":"","answers":[{"id":1,"text":"Метод, предотвращающий дальнейшее распространение текущего события, т.е. предотвращает дальнейшее всплытие события."},{"id":2,"text":"Ссылка на элемент, который был инициатором события."},{"id":3,"text":"Ссылка на элемент, в котором в данный момент обрабатывается событие."},{"id":4,"text":"Метод, отменяющий поведение браузера по умолчанию, которое происходит при обработке события."}],"rightAnswer":2,"points":150},{"id":9,"text":"Что такое Event.currentTarget?","img":"","answers":[{"id":1,"text":"Метод, предотвращающий дальнейшее распространение текущего события, т.е. предотвращает дальнейшее всплытие события."},{"id":2,"text":"Ссылка на элемент, который был инициатором события."},{"id":3,"text":"Ссылка на элемент, в котором в данный момент обрабатывается событие."},{"id":4,"text":"Метод, отменяющий поведение браузера по умолчанию, которое происходит при обработке события."}],"rightAnswer":3,"points":180},{"id":10,"text":"Что вернёт typeof NaN?","img":"","answers":[{"id":1,"text":"null"},{"id":2,"text":"undefined"},{"id":3,"text":"number"},{"id":4,"text":"object"}],"rightAnswer":3,"points":200},{"id":11,"text":"Что такое side effect?","img":"","answers":[{"id":1,"text":"Это побочный эффект функции, который изменяет состояние за пределами функции."},{"id":2,"text":"Это побочный эффект функции, который происходит, когда мы используем функцию, до её определения."},{"id":3,"text":"Это побочный эффект, из-за которого мы не имеем собственного this в стрелочной функции."},{"id":4,"text":"Это побочный эффект, из-за которого мы можем иметь доступ к переменной, объявленной с помощью var, вне блока объявления."}],"rightAnswer":1,"points":200},{"id":12,"text":"Что выведет следующий код:","img":"./img/1.jpg","answers":[{"id":1,"text":"1 2 6 7 3 5 4"},{"id":2,"text":"1 2 6 7 3 4 5"},{"id":3,"text":"1 7 2 6 3 5 4"},{"id":4,"text":"1 7 3 5 2 6 4"}],"rightAnswer":4,"points":800},{"id":13,"text":"Что выведет следующий код:","img":"./img/2.jpg","answers":[{"id":1,"text":"5"},{"id":2,"text":"10"},{"id":3,"text":"undefined"},{"id":4,"text":"Код остановит выполнение с ошибкой."}],"rightAnswer":3,"points":300},{"id":14,"text":"Одинаковый ли результат вернут эти 2 функции:","img":"./img/3.jpg","answers":[{"id":1,"text":"Нет, вторая функция вернёт undefined т.к. интерпретатор поставит \\";\\" после return и дальнейший код функции не будет выполнен."},{"id":2,"text":"Да, обе функции вернут объект с полем hello и его значением \\"world!\\"."},{"id":3,"text":"Нет, потому что во второй функции код остановит выполнение с ошибкой из-за неправильного синтаксиса."},{"id":4,"text":"Нет, потому что во второй функции код остановит выполнение с ошибкой из-за отсутствия точки с запятой после закрывающей фигурной скобки объекта."}],"rightAnswer":1,"points":300},{"id":15,"text":"Что такое call?","img":"","answers":[{"id":1,"text":"call - это метод, который позволяет вызывать функцию с указанным значением this и аргументами."},{"id":2,"text":"call - это метод, который позволяет вызывать функцию с указанным значением this и массивом аргументов."},{"id":3,"text":"call - это метод, который создает новую функцию, привязывая указанное значение this к функции, независимо от того, как она вызывается."},{"id":4,"text":"call - это метод, который создаёт новую функцию, которая имеет доступ к своему собственному контексту выполнения, а также к контексту выполнения внешней функции, в которой она была объявлена."}],"rightAnswer":1,"points":300},{"id":16,"text":"Что такое apply?","img":"","answers":[{"id":1,"text":"apply - это метод, который позволяет вызывать функцию с указанным значением this и аргументами."},{"id":2,"text":"apply - это метод, который позволяет вызывать функцию с указанным значением this и массивом аргументов."},{"id":3,"text":"apply - это метод, который создает новую функцию, привязывая указанное значение this к функции, независимо от того, как она вызывается."},{"id":4,"text":"apply - это метод, который создаёт новую функцию, которая имеет доступ к своему собственному контексту выполнения, а также к контексту выполнения внешней функции, в которой она была объявлена."}],"rightAnswer":2,"points":300},{"id":17,"text":"Что такое bind?","img":"","answers":[{"id":1,"text":"bind - это метод, который позволяет вызывать функцию с указанным значением this и аргументами."},{"id":2,"text":"bind - это метод, который позволяет вызывать функцию с указанным значением this и массивом аргументов."},{"id":3,"text":"bind - это метод, который создает новую функцию, привязывая указанное значение this к функции, независимо от того, как она вызывается."},{"id":4,"text":"bind - это метод, который создаёт новую функцию, которая имеет доступ к своему собственному контексту выполнения, а также к контексту выполнения внешней функции, в которой она была объявлена."}],"rightAnswer":3,"points":300},{"id":18,"text":"Что такое замыкание?","img":"","answers":[{"id":1,"text":"Замыкание - это вызов функции с указанным значением this и аргументами."},{"id":2,"text":"Замыкание - это вызов функции с указанным значением this и массивом аргументов."},{"id":3,"text":"Замыкание - это вызов метода, который создает новую функцию, привязывая указанное значение this к функции, независимо от того, как она вызывается."},{"id":4,"text":"Замыкание - функция, которая имеет доступ к своему собственному контексту выполнения, а также к контексту выполнения внешней функции, в которой она была объявлена."}],"rightAnswer":4,"points":300},{"id":19,"text":"Что выведет следующий код:","img":"./img/4.jpg","answers":[{"id":1,"text":"Andrey"},{"id":2,"text":"Sergey"},{"id":3,"text":"undefined"},{"id":4,"text":"Код завершит выполнение с ошибкой."}],"rightAnswer":4,"points":350},{"id":20,"text":"Что выведет следующий код:","img":"./img/5.jpg","answers":[{"id":1,"text":"Sergey\\nfalse 1 2 3"},{"id":2,"text":"Sergey\\nfalse"},{"id":3,"text":"Sergey\\ntrue 1 2 3"},{"id":4,"text":"Код завершит выполнение с ошибкой."}],"rightAnswer":4,"points":400},{"id":21,"text":"Является ли массив отдельным типом данных?","img":"","answers":[{"id":1,"text":"Да"},{"id":2,"text":"Нет"}],"rightAnswer":2,"points":50},{"id":22,"text":"Что такое Set?","img":"","answers":[{"id":1,"text":"Объект Set – это особый вид коллекции: «множество» значений (без ключей), где каждое значение может появляться только один раз."},{"id":2,"text":"Set – это коллекция ключ/значение, как и Object. Но основное отличие в том, что Set позволяет использовать ключи любого типа."},{"id":3,"text":"Оператор, который используются для установки значения свойства объекта."},{"id":4,"text":"Оператор, который используется для установки нового поля объекта."}],"rightAnswer":1,"points":300},{"id":23,"text":"Что такое Map?","img":"","answers":[{"id":1,"text":"Это особый вид коллекции: «множество» значений (без ключей), где каждое значение может появляться только один раз."},{"id":2,"text":"Это коллекция ключ/значение, как и Object, но основное отличие в том, что Map позволяет использовать ключи любого типа."},{"id":3,"text":"Это метод, который создаёт новый массив с результатом вызова указанной функции для каждого элемента массива."},{"id":4,"text":"Это функция, которая принимает число n и возвращает двумерный массив размером n на n."}],"rightAnswer":2,"points":300}]');function e(t){for(let e=t.length-1;e>0;e--){const i=Math.floor(Math.random()*(e+1)),n=t[e];t[e]=t[i],t[i]=n}return t}const i=()=>e(t).map((t=>({...t,answers:e(t.answers)})));let n=i(),s=!1,r=!1,d=0,a=0,o=!1,l=0,c="Время: 00:00.0",x=null;const g=(t,e)=>{const i=document.createElement(t);return i.className=e,i},u=g("div","switch-theme");u.innerHTML='<div class="switch-theme__circle"></div>',document.body.append(u),window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches&&(o=!0,u.classList.add("dark"),document.body.classList.add("dark"));const p=g("div","timer");document.body.append(p);u.addEventListener("click",(()=>{o=!o,u.classList.toggle("dark"),document.body.classList.toggle("dark")}));const m=g("div","content");document.body.append(m);const h=t=>(t%=60)<10?`0${t}`:String(t),w=()=>{let t=0;x=setInterval((()=>{t+=1,c=`Время: ${h(Math.floor(t/600))}:${h(Math.floor(t/10))}.${t%10}`,p.innerHTML=c}),100)},v=()=>{n=i(),a=0,l=0,d=0,s=!0,clearInterval(x),w(),r=!1,y()},b=()=>{if(s&&document.querySelector(".start-button")&&document.querySelector(".start-button").removeEventListener("click",v),!r&&document.querySelector(".button-start-again")){document.querySelector(".button-start-again").removeEventListener("click",v)}document.querySelectorAll(".question-answers__item").forEach((t=>t.removeEventListener("click",A)))},A=t=>{const e=t.currentTarget,i=Number(e.getAttribute("data-answer")),s=Number(e.getAttribute("data-question"));let o=n.find((t=>t.id===s));const c=o.rightAnswer===i;var g;c?(a++,l+=o.points,e.classList.add("success")):e.classList.add("error"),b(),g=c,console.log(),document.querySelector(".result").innerHTML=`\n  <div class="result">\n    <p class="result__right-answers">${a+"/"+n.length}</p>\n    <div class="result__score">\n      <p>Очки: ${l}</p>\n      <p class="question-points">${g?`+${n[d].points}`:""}</p>\n    </div>\n  </div>\n  `,++d>=n.length&&clearInterval(x),setTimeout((()=>{d>=n.length&&(d=0,r=!0),y()}),1500)};function y(){if(b(),document.body.className=o?"dark":"",m.innerHTML=`\n    <svg class="logo">\n      <use xlink:href="sprite.svg#logo" />\n    </svg>\n    <div class="container">\n      ${s?r?`\n              <div class="result">\n                <h2>Ваш счёт: ${a}/${n.length}</h2>\n                <p>Очки: ${l}</p>\n                <button class="button-start-again">Начать заново</button>\n              </div>\n            `:`\n              <div class="result">\n                <p class="result__right-answers">${a+"/"+n.length}</p>\n                <div class="result__score">\n                  <p>Очки: ${l}</p>\n                  <p class="question-points"></p>\n                </div>\n              </div>\n              <div class="question">\n                <h2 class="question__text">${d+1+") "+n[d].text}</h2>\n                ${n[d].img?`<div class="question__wrapper-image">\n                      <img class="question__image" src="${n[d].img}" alt="">\n                    </div>`:""}\n                <ol class="question-answers">\n                  ${n[d].answers.map((t=>`\n                    <li class="question-answers__item" data-answer="${t.id}" data-question="${n[d].id}">\n                      <span>${t.text}</span>\n                    </li>\n                  `)).join("")}\n                </ol>\n              </div>`:'<button class="start-button">Начать тест</button>'}\n    </div>`,r){document.querySelector(".button-start-again").addEventListener("click",v)}if(s){document.querySelectorAll(".question-answers__item").forEach((t=>t.addEventListener("click",A)))}if(!s){document.querySelector(".start-button").addEventListener("click",v)}}y()})();
//# sourceMappingURL=main.685b19eda1f9fac8e027.js.map