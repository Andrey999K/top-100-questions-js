[
  {
    "id": 1,
    "text": "Чем отличается оператор \"==\" от \"===\"?",
    "answers": [
      {
        "id": 1,
        "text": "\"==\" сравнивает значения с приведением типов, в то время как \"===\" сравнивает значения без приведения типов"
      },
      {
        "id": 2,
        "text": "\"==\" сравнивает значения без приведения типов, в то время как \"===\" сравнивает значения с приведением типов"
      },
      {
        "id": 3,
        "text": "\"==\" сравнивает значения, а \"===\" сравнивает и если значения равны, присваивает значение"
      },
      {
        "id": 4,
        "text": "В JavaScript нет оператора \"===\""
      }
    ],
    "rightAnswer": 2
  },
  {
    "id": 2,
    "text": "Какие основные типы данных есть в JavaScript?",
    "answers": [
      {
        "id": 1,
        "text": "Number, BigInt, String, Boolean, Null, Undefined, Object, Symbol"
      },
      {
        "id": 2,
        "text": "Number, String, Boolean, Object, Function, Null"
      },
      {
        "id": 3,
        "text": "Int, Float, String, Array, Function, Object"
      },
      {
        "id": 4,
        "text": "Number, BigInt, String, Boolean, Null, Undefined, Object"
      }
    ],
    "rightAnswer": 1
  },
  {
    "id": 3,
    "text": "В чём отличие var, let и const?",
    "answers": [
      {
        "id": 1,
        "text": "let и const отличаются тем, что мы не можем переназначить переменную объявленную с помощью const, а var это устаревший синтаксис let"
      },
      {
        "id": 2,
        "text": "var это устаревший синтаксис let, а const отличается от них тем, что переменную объявленную с помощью const нельзя переназначить"
      },
      {
        "id": 3,
        "text": "let и const имеют блочную область видимости и отличаются тем, что мы не можем переназначить переменную объявленную с помощью const. А var отличается от let тем, что имеет функциональную область видимости"
      },
      {
        "id": 4,
        "text": "var это устаревший синтаксис let. Они имеют функциональную область видимости, а const отличается от них тем, что имеет блочную область видимости"
      }
    ],
    "rightAnswer": 3
  },
  {
    "id": 4,
    "text": "В чём отличие стрелочной функции от обычной?",
    "answers": [
      {
        "id": 1,
        "text": "У обычной функции в отличии от стелочной есть собственный this и мы можем обратиться к ней до её объявления."
      },
      {
        "id": 2,
        "text": "У стрелочной функции в отличии от обычной есть собственный this и мы можем обратиться к ней до её объявления."
      },
      {
        "id": 3,
        "text": "У обычной функции в отличии от стрелочной есть собственный this и мы не можем обратиться к ней до её объявления."
      },
      {
        "id": 4,
        "text": "У стрелочной функции в отличии от обычной есть собственный this и мы не можем обратиться к ней до её объявления. "
      }
    ],
    "rightAnswer": 1
  },
  {
    "id": 5,
    "text": "Что делает event.preventDefault()?",
    "answers": [
      {
        "id": 1,
        "text": "Предотвращает дальнейшее распространение текущего события, т.е. предотвращает всплытие."
      },
      {
        "id": 2,
        "text": "Возвращает ссылку на объект, который был инициатором события."
      },
      {
        "id": 3,
        "text": "Возвращает ссылку на элемент, в котором в данный момент обрабатывается событие."
      },
      {
        "id": 4,
        "text": "Отменяет поведение браузера по умолчанию, которое происходит при обработке события."
      }
    ],
    "rightAnswer": 4
  }
]