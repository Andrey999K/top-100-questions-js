{"version":3,"file":"main.57cde598bbf83db54c18.js","mappings":"o2MAAe,SAASA,EAAQC,GAC9B,IAAK,IAAIC,EAAID,EAAIE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,MAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAIC,GACjBD,EAAIC,GAAKD,EAAIG,GACbH,EAAIG,GAAKI,CACX,CACA,OAAOP,CACT,CCJA,MAAMQ,EAAqB,IAClBT,EAAQ,GAAWU,KAAIC,IAAY,IAAMA,EAAUC,QAASZ,EAAQW,EAASC,aAGtF,IAAIC,EAAkBJ,IAElBK,GAAc,EACdC,GAAY,EACZC,EAAuB,EACvBC,EAAiB,EACjBC,GAAY,EAEhB,MAAMC,EAAgB,CAACC,EAAKC,KAC1B,MAAMC,EAAOC,SAASJ,cAAcC,GAEpC,OADAE,EAAKD,UAAYA,EACVC,CAAI,EAGPE,EAAcL,EAAc,MAAO,gBACzCK,EAAYC,UAAY,2CACxBF,SAASG,KAAKC,OAAOH,GACjBI,OAAOC,YAAcD,OAAOC,WAAW,gCAAgCC,UACzEZ,GAAY,EACZM,EAAYO,UAAUC,IAAI,QAC1BT,SAASG,KAAKK,UAAUC,IAAI,SAE9BR,EAAYS,iBAAiB,SAAS,KACpCf,GAAaA,EACbM,EAAYO,UAAUG,OAAO,QAC7BX,SAASG,KAAKK,UAAUG,OAAO,OAAO,IAGxC,MAAMC,EAAUhB,EAAc,MAAO,WACrCI,SAASG,KAAKC,OAAOQ,GAErB,MAAMC,EAAY,KAChBvB,EAAkBJ,IAClBQ,EAAiB,EACjBD,EAAuB,EACvBF,GAAc,EACdC,GAAY,EACZsB,GAAe,EAGXC,EAAiB,KAIrB,GAHIxB,GAAeS,SAASgB,cAAc,kBACxChB,SAASgB,cAAc,iBAAiBC,oBAAoB,QAASJ,IAElErB,GAAaQ,SAASgB,cAAc,uBAAwB,CACtChB,SAASgB,cAAc,uBAC/BC,oBAAoB,QAASJ,EAChD,CACgBb,SAASkB,iBAAiB,2BAClCC,SAAQC,GAAUA,EAAOH,oBAAoB,QAASI,IAAc,EAGxEA,EAAgBC,IACpB,MAAMvB,EAAOuB,EAAEC,cACTC,EAAWC,OAAO1B,EAAK2B,aAAa,gBACpCC,EAAaF,OAAO1B,EAAK2B,aAAa,kBACtBpC,EAAgBsC,MAAKxC,GAAYA,EAASyC,KAAOF,IACnDG,cAAgBN,GAClC9B,IACAK,EAAKS,UAAUC,IAAI,YAEhBV,EAAKS,UAAUC,IAAI,SACxBM,IACAgB,YAAW,OACHtC,GAAwBH,EAAgBV,SAC5Ca,EAAuB,EACvBD,GAAY,GAEdsB,GAAe,GACd,IAAK,EAGV,SAASA,IAoCP,GAnCAC,IACef,SAASG,KAAKL,UAAzBH,EAAqC,OACV,GAC/BiB,EAAQV,UAAY,wHAMbX,EAEKC,EAgBA,wDAEkBE,KAAkBJ,EAAgBV,6HAjBpD,sFAE+B,EAAUa,GAAsBuC,8BAC3D,EAAUvC,GAAsBwC,IAAM,gHAEF,EAAUxC,GAAsBwC,uCAC5D,wEAEN3C,EAAgBG,GAAsBJ,QAAQF,KAAKiC,GAAW,yEACZA,EAAOS,sBAAsBvC,EAAgBG,GAAsBoC,qCAC3GT,EAAOY,+DAEhBE,KAAK,mDAdd,kEAyBN1C,EAAW,CACYQ,SAASgB,cAAc,uBAC/BN,iBAAiB,QAASG,EAC7C,CACA,GAAItB,EAAa,CACCS,SAASkB,iBAAiB,2BAClCC,SAAQC,GAAUA,EAAOV,iBAAiB,QAASW,IAC7D,CACA,IAAK9B,EAAa,CACIS,SAASgB,cAAc,iBAC/BN,iBAAiB,QAASG,EACxC,CACF,CAEAC,G","sources":["webpack:///./utils/shuffle.js","webpack:///./index.js"],"sourcesContent":["export default function shuffle(arr) {\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    const temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n  }\r\n  return arr;\r\n}\r\n","import \"./main.scss\";\r\nimport questions from \"./data/questions.json\";\r\nimport shuffle from \"./utils/shuffle\";\r\n\r\nconst randomizeQuestions = () => {\r\n  return shuffle(questions).map(question => ({ ...question, answers: shuffle(question.answers) }));\r\n};\r\n\r\nlet randomQuestions = randomizeQuestions();\r\n\r\nlet testStarted = false;\r\nlet testEnded = false;\r\nlet currentQuestionIndex = 0;\r\nlet successAnswers = 0;\r\nlet darkTheme = false;\r\n\r\nconst createElement = (tag, className) => {\r\n  const elem = document.createElement(tag);\r\n  elem.className = className;\r\n  return elem;\r\n}\r\n\r\nconst switchTheme = createElement(\"div\", \"switch-theme\");\r\nswitchTheme.innerHTML = `<div class=\"switch-theme__circle\"></div>`;\r\ndocument.body.append(switchTheme);\r\nif (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n  darkTheme = true;\r\n  switchTheme.classList.add(\"dark\");\r\n  document.body.classList.add(\"dark\");\r\n}\r\nswitchTheme.addEventListener(\"click\", () => {\r\n  darkTheme = !darkTheme;\r\n  switchTheme.classList.toggle(\"dark\");\r\n  document.body.classList.toggle(\"dark\");\r\n});\r\n\r\nconst content = createElement(\"div\", \"content\");\r\ndocument.body.append(content);\r\n\r\nconst startTest = () => {\r\n  randomQuestions = randomizeQuestions();\r\n  successAnswers = 0;\r\n  currentQuestionIndex = 0;\r\n  testStarted = true;\r\n  testEnded = false;\r\n  renderContent();\r\n};\r\n\r\nconst deleteHandlers = () => {\r\n  if (testStarted && document.querySelector(\".start-button\")) {\r\n    document.querySelector(\".start-button\").removeEventListener(\"click\", startTest);\r\n  }\r\n  if (!testEnded && document.querySelector(\".button-start-again\")) {\r\n    const buttonStartAgain = document.querySelector(\".button-start-again\");\r\n    buttonStartAgain.removeEventListener(\"click\", startTest);\r\n  }\r\n  const answers = document.querySelectorAll(\".question-answers__item\");\r\n  answers.forEach(answer => answer.removeEventListener(\"click\", selectAnswer));\r\n}\r\n\r\nconst selectAnswer = (e) => {\r\n  const elem = e.currentTarget;\r\n  const answerId = Number(elem.getAttribute(\"data-answer\"));\r\n  const questionId = Number(elem.getAttribute(\"data-question\"));\r\n  let currentQuestion = randomQuestions.find(question => question.id === questionId);\r\n  if (currentQuestion.rightAnswer === answerId) {\r\n    successAnswers++;\r\n    elem.classList.add(\"success\");\r\n  }\r\n  else elem.classList.add(\"error\");\r\n  deleteHandlers();\r\n  setTimeout(() => {\r\n    if (++currentQuestionIndex >= randomQuestions.length) {\r\n      currentQuestionIndex = 0;\r\n      testEnded = true;\r\n    }\r\n    renderContent();\r\n  }, 1000);\r\n};\r\n\r\nfunction renderContent() {\r\n  deleteHandlers();\r\n  if (darkTheme) document.body.className = \"dark\";\r\n  else document.body.className = \"\";\r\n  content.innerHTML = `\r\n    <svg class=\"logo\">\r\n      <use xlink:href=\"sprite.svg#logo\" />\r\n    </svg>\r\n    <div class=\"container\">\r\n      ${\r\n        !testStarted\r\n          ? `<button class=\"start-button\">Начать тест</button>`\r\n          : (!testEnded\r\n            ? `\r\n              <div class=\"question\">\r\n                <h2 class=\"question__text\">${questions[currentQuestionIndex].text}</h2>\r\n                ${questions[currentQuestionIndex].img ? `\r\n                <div class=\"question__wrapper-image\">\r\n                  <img class=\"question__image\" src=\"${questions[currentQuestionIndex].img}\" alt=\"\">\r\n                </div>` : \"\"}\r\n                <ol class=\"question-answers\">\r\n                  ${randomQuestions[currentQuestionIndex].answers.map((answer) => `\r\n                    <li class=\"question-answers__item\" data-answer=\"${answer.id}\" data-question=\"${randomQuestions[currentQuestionIndex].id}\">\r\n                      <span>${answer.text}</span>\r\n                    </li>\r\n                  `).join(\"\")}\r\n                </ol>\r\n              </div>`\r\n            : `\r\n              <div>\r\n                <h2>Ваш счёт: ${successAnswers}/${randomQuestions.length}</h2>\r\n                <button class=\"button-start-again\">Начать заново</button>\r\n              </div>\r\n            `)\r\n      }\r\n    </div>`;\r\n  if (testEnded) {\r\n    const buttonStartAgain = document.querySelector(\".button-start-again\");\r\n    buttonStartAgain.addEventListener(\"click\", startTest);\r\n  }\r\n  if (testStarted) {\r\n    const answers = document.querySelectorAll(\".question-answers__item\");\r\n    answers.forEach(answer => answer.addEventListener(\"click\", selectAnswer));\r\n  }\r\n  if (!testStarted) {\r\n    const startButton = document.querySelector(\".start-button\");\r\n    startButton.addEventListener(\"click\", startTest);\r\n  }\r\n}\r\n\r\nrenderContent();\r\n"],"names":["shuffle","arr","i","length","j","Math","floor","random","temp","randomizeQuestions","map","question","answers","randomQuestions","testStarted","testEnded","currentQuestionIndex","successAnswers","darkTheme","createElement","tag","className","elem","document","switchTheme","innerHTML","body","append","window","matchMedia","matches","classList","add","addEventListener","toggle","content","startTest","renderContent","deleteHandlers","querySelector","removeEventListener","querySelectorAll","forEach","answer","selectAnswer","e","currentTarget","answerId","Number","getAttribute","questionId","find","id","rightAnswer","setTimeout","text","img","join"],"sourceRoot":""}